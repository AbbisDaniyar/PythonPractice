"""
Color Game Bot - –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤
https://www.arealme.com/colors/ru/
"""

import time
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.chrome.options import Options
from collections import Counter


class ColorGameBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞ –¥–ª—è —Ü–≤–µ—Ç–æ–≤–æ–π –∏–≥—Ä—ã"""

    def __init__(self):
        self.setup_driver()
        self.score = 0
        self.start_time = 0

    def setup_driver(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Chrome –¥—Ä–∞–π–≤–µ—Ä–∞"""
        chrome_options = Options()
        chrome_options.add_argument("--disable-blink-features=AutomationControlled")

        self.service = Service(ChromeDriverManager().install())
        self.driver = webdriver.Chrome(service=self.service, options=chrome_options)
        self.driver.set_window_size(1200, 800)

    def start_game(self):
        """–ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã"""
        print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        self.driver.get("https://www.arealme.com/colors/ru/")
        time.sleep(2)

        start_btn = self.driver.find_element(By.ID, "start")
        start_btn.click()
        print("üéÆ –ò–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞!")
        self.start_time = time.time()
        time.sleep(2)

    def get_remaining_time(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏"""
        elapsed = time.time() - self.start_time
        return max(0, 60 - elapsed)

    def find_color_elements(self):
        """–ü–æ–∏—Å–∫ —Ü–≤–µ—Ç–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"""
        try:
            container = self.driver.find_element(By.CSS_SELECTOR, ".patra-color")
            spans = container.find_elements(By.TAG_NAME, "span")

            color_elements = []
            for span in spans:
                try:
                    bg_color = span.value_of_css_property('background-color')
                    if bg_color and bg_color.startswith('rgb'):
                        color_elements.append(span)
                except:
                    continue

            return color_elements
        except:
            return []

    def find_unique_color(self, elements):
        """–ü–æ–∏—Å–∫ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞ —Å—Ä–µ–¥–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
        if len(elements) < 4:
            return None

        colors = []
        for element in elements:
            try:
                color = element.value_of_css_property('background-color')
                colors.append(color)
            except:
                continue

        color_count = Counter(colors)
        for color, count in color_count.items():
            if count == 1:
                for element in elements:
                    if element.value_of_css_property('background-color') == color:
                        return element

        return None

    def play_round(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ä–∞—É–Ω–¥–∞ –∏–≥—Ä—ã"""
        elements = self.find_color_elements()
        if not elements:
            return False

        unique_element = self.find_unique_color(elements)
        if unique_element:
            try:
                unique_element.click()
                self.score += 1
                return True
            except:
                return False

        return False

    def run_game(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª"""
        if not self.start_game():
            return

        print("‚è± –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –í—Ä–µ–º—è: 60 —Å–µ–∫—É–Ω–¥")

        # –û—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
        while self.get_remaining_time() > 0:
            self.play_round()
            time.sleep(0.1)

        print(f"–§–∏–Ω–∞–ª—å–Ω—ã–π —Å—á–µ—Ç: {self.score}")
        self.driver.save_screenshot(f"result_{self.score}.png")

    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞"""
        self.driver.quit()


def main():
    bot = ColorGameBot()
    try:
        bot.run_game()
    finally:
        bot.close()


if __name__ == "__main__":
    main()