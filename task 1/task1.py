import time
import pandas as pd
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options


def working_solution():
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Chrome options –¥–ª—è –æ–±—Ö–æ–¥–∞ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
    chrome_options = Options()
    chrome_options.add_argument("--disable-blink-features=AutomationControlled")
    chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
    chrome_options.add_argument(
        "--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/141.0.0.0 Safari/537.36")

    service = Service(ChromeDriverManager().install())
    driver = webdriver.Chrome(service=service, options=chrome_options)
    driver.maximize_window()

    try:
        print("–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∞–π—Ç...")
        driver.get("https://www.rpachallenge.com/")

        # –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        WebDriverWait(driver, 20).until(
            EC.presence_of_element_located((By.TAG_NAME, "body"))
        )
        print("–°–∞–π—Ç –∑–∞–≥—Ä—É–∂–µ–Ω")

        # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –î–û –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ Start
        print("–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel...")
        df = pd.read_excel("https://www.rpachallenge.com/assets/downloadFiles/challenge.xlsx")
        print(f"–ù–∞–π–¥–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π")

        # –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É Start
        print("üîç –ò—â–µ–º –∫–Ω–æ–ø–∫—É Start...")
        start_button = WebDriverWait(driver, 20).until(
            EC.element_to_be_clickable((By.XPATH, "//button[text()='Start']"))
        )
        print("–ö–Ω–æ–ø–∫–∞ Start –Ω–∞–π–¥–µ–Ω–∞")

        start_button.click()
        print("–ß–µ–ª–ª–µ–Ω–¥–∂ –Ω–∞—á–∞—Ç!")

        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–æ—Ä–º—ã
        form_selectors = [
            "input[formcontrolname]",  # –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ–ª–µ–∫—Ç–æ—Ä
            "form input",  # –õ—é–±–æ–π input –≤ —Ñ–æ—Ä–º–µ
            ".form-group input",  # Input –≤ –≥—Ä—É–ø–ø–µ —Ñ–æ—Ä–º—ã
            "input[ng-reflect-name]",  # Angular –∞—Ç—Ä–∏–±—É—Ç
            "input"  # –ü—Ä–æ—Å—Ç–æ –ª—é–±–æ–π input
        ]

        form_found = False
        for selector in form_selectors:
            try:
                elements = WebDriverWait(driver, 10).until(
                    EC.presence_of_all_elements_located((By.CSS_SELECTOR, selector))
                )
                if elements:
                    print(f"–§–æ—Ä–º–∞ –Ω–∞–π–¥–µ–Ω–∞ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º: {selector}")
                    print(f"–ù–∞–π–¥–µ–Ω–æ {len(elements)} –ø–æ–ª–µ–π")
                    form_found = True
                    break
            except:
                continue

        if not form_found:
            print("–§–æ—Ä–º–∞ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏...")
            driver.save_screenshot("debug_no_form.png")
            print("–°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ debug_no_form.png")

            # –ü—Ä–æ–±—É–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
            print("–ü—Ä–æ–±—É–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å...")
            elements = driver.find_elements(By.TAG_NAME, "input")
            print(f"–ù–∞–π–¥–µ–Ω–æ {len(elements)} input —ç–ª–µ–º–µ–Ω—Ç–æ–≤")

        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—ã
        successful_forms = 0

        for i in range(len(df)):
            row = df.iloc[i]
            print(f"\n–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø–∏—Å—å {i + 1}/{len(df)}")

            try:
                # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–∏
                field_data = {
                    'labelFirstName': str(row['First Name']),
                    'labelLastName': str(row['Last Name ']),
                    'labelCompanyName': str(row['Company Name']),
                    'labelRole': str(row['Role in Company']),
                    'labelAddress': str(row['Address']),
                    'labelEmail': str(row['Email']),
                    'labelPhone': str(row['Phone Number'])
                }

                # –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–∞–∂–¥–æ–µ –ø–æ–ª–µ
                for field_name, value in field_data.items():
                    try:
                        # –ò—â–µ–º –ø–æ–ª–µ —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
                        selectors = [
                            f"input[formcontrolname='{field_name}']",
                            f"input[ng-reflect-name='{field_name}']",
                            f"input[placeholder*='{field_name.replace('label', '')}']"
                        ]

                        element = None
                        for selector in selectors:
                            try:
                                element = WebDriverWait(driver, 5).until(
                                    EC.presence_of_element_located((By.CSS_SELECTOR, selector))
                                )
                                break
                            except:
                                continue

                        if element:
                            element.clear()
                            element.send_keys(value)
                            print(f"   {field_name}: {value}")
                        else:
                            print(f"   –ü–æ–ª–µ {field_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

                    except Exception as e:
                        print(f"    –û—à–∏–±–∫–∞ –≤ –ø–æ–ª–µ {field_name}: {e}")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É
                print("   –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É...")
                submit_selectors = [
                    "input[value='Submit']",
                    "button[type='submit']",
                    ".btn-primary",
                    "input[type='submit']"
                ]

                submit_found = False
                for selector in submit_selectors:
                    try:
                        submit_btn = WebDriverWait(driver, 5).until(
                            EC.element_to_be_clickable((By.CSS_SELECTOR, selector))
                        )
                        submit_btn.click()
                        submit_found = True
                        print("   –§–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
                        successful_forms += 1
                        break
                    except:
                        continue

                if not submit_found:
                    print("   –ö–Ω–æ–ø–∫–∞ Submit –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

                # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π —Ñ–æ—Ä–º–æ–π
                time.sleep(1)

            except Exception as e:
                print(f" –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø–∏—Å–∏ {i + 1}: {e}")
                continue

        # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print(f"\n –ó–∞–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {successful_forms}/{len(df)} —Ñ–æ—Ä–º")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
        time.sleep(3)
        driver.save_screenshot("final_result.png")
        print(" –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ final_result.png")

        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        try:
            result_elements = driver.find_elements(By.CLASS_NAME, "congratulations")
            if result_elements:
                print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result_elements[0].text}")
        except:
            print("‚Ñπ–¢–µ–∫—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")

    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        driver.save_screenshot("error.png")
        print("–°–∫—Ä–∏–Ω—à–æ—Ç –æ—à–∏–±–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
    finally:
        print("–ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É")
        driver.quit()


if __name__ == "__main__":
    working_solution()